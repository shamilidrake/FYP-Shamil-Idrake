import spidev
import time
import RPi.GPIO as GPIO
import socket
import requests
import datetime

# MCP3008 channel where the photodiode is connected
adc_channel = 0

# SPI setup
spi = spidev.SpiDev()
spi.open(0, 0)  # Open SPI bus 0, device (CS) 0
spi.max_speed_hz = 3000000  # Set the SPI speed

# Define receiver laptop IP and port
RECEIVER_IP = "192.168.1.175"
RECEIVER_PORT = 5005  # You can choose a different port if needed

# Telegram Bot API details
TELEGRAM_BOT_TOKEN = "7627356810:AAFlpmf__lfXrbVDJHBuXoSDNBLLxDDZcWU"
TELEGRAM_CHAT_ID = "716211867"

# Function to send message to Telegram
def send_telegram_message(message):
	url = f"https://api.telegram.org/bot7627356810:AAFlpmf__lfXrbVDJHBuXoSDNBLLxDDZcWU/sendMessage"
	data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
	try:
    	response = requests.post(url, data=data)
    	if response.status_code == 200:
        	print("Message successfully sent to Telegram!")
    	else:
        	print(f"Failed to send message. Status code: {response.status_code}, Response: {response.text}")
	except Exception as e:
    	print(f"Error sending message to Telegram: {e}")

# Function to read from the MCP3008
def read_adc(channel):
	adc = spi.xfer2([1, (8 + channel) << 4, 0])
	data = ((adc[1] & 3) << 8) + adc[2]
	return data

# Function to detect high or low signal
def read_signal(threshold=80):
	value = read_adc(adc_channel)
	return 1 if value > threshold else 0

# Function to read a signal array
def read_signal_array(length):
	signal_array = []
	for _ in range(length):
    	bit = read_signal()
    	signal_array.append(bit)
    	time.sleep(0.045)  # Adjusted delay to match slower transmission
	return signal_array

# Function to decode binary to ASCII
def binary_to_ascii(binary_string):
	ascii_characters = [chr(int(binary_string[i:i+8], 2)) for i in range(0, len(binary_string), 8)]
	return ''.join(ascii_characters)

# Function to read the entire message
def read_message():
	lifi_transmission_delay = None
	start_time = None
	start_signal = [1, 0, 1, 0, 1, 0, 1, 0]
	end_signal = '010101010'

	user_input = input("Enter 'y' to activate transmission reading mode: ")
	if user_input.lower() != 'y':
    	print("Transmission reading mode not activated. Exiting.")
    	return

	print("Waiting for the first '1' bit...")
	while True:
    	bit = read_signal()
    	if bit == 1:
        	print("First '1' bit detected, checking for start signal...")
        	break
    	time.sleep(0.0005)

	while True:
    	signal_array = read_signal_array(8)
    	if signal_array == start_signal:
        	start_time = time.time()
        	print("Start signal detected!")
        	break
    	print("Start signal not detected. Waiting...")

	binary_message = ''
	end_signal_index = 0
	while True:
    	bit = read_signal()
    	binary_message += str(bit)
	 
    	if str(bit) == end_signal[end_signal_index]:
        	end_signal_index += 1
        	if end_signal_index == len(end_signal):
            	end_time = time.time()
            	if start_time is not None:
                	lifi_transmission_delay = end_time - start_time
                	print("End signal detected!")
                	print(f"LiFi transmission duration: {lifi_transmission_delay:.2f}s")
            	else:
                	print("Start time not found. Cannot calculate delay.")
            	break
    	else:
        	end_signal_index = 0
	 
    	time.sleep(0.045)

	if end_signal_index == len(end_signal):
    	binary_message = binary_message[:-len(end_signal)]

	with open("received_bits.txt", "w") as file:
    	file.write(binary_message)

	message = binary_to_ascii(binary_message)

	# STEP 1: Time when LiFi message is fully received
	receive_time = time.time()

	# STEP 2: Send to network
	send_message_to_network(message, receive_time)

	# STEP 3: Send to Telegram and measure delay
	telegram_start = time.time()
	send_telegram_message(message)
	telegram_end = time.time()

	# STEP 4: Calculate delay
	telegram_delay = telegram_end - receive_time

	# STEP 5: Log to file
	with open("Lifi_Starlink.txt", "a") as log:
    	timestamp_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    	receive_time_str = time.strftime("%H:%M:%S", time.localtime(receive_time))
    	telegram_end_str = time.strftime("%H:%M:%S", time.localtime(telegram_end))

    	log.write(
        	f"\nTimestamp: {timestamp_str}, "
        	f"Message: \"{message}\", "
        	f"\nLiFi transmission duration: {lifi_transmission_delay:.2f}s, "
        	f"\nTime received and sent to cloud: {receive_time_str}, "
        	f"\nTelegram receive time: {telegram_end_str}, "
        	f"\nTransmission to telegram: {telegram_delay:.3f} sec\n"
    	)

	print(f"Transmission delay to Telegram: {telegram_delay:.3f} seconds")

	return message

# Function to send the received message over the local network
def send_message_to_network(message, receive_time):
	try:
    	with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        	s.connect((RECEIVER_IP, RECEIVER_PORT))
        	payload = f"{message}|{receive_time}"
        	s.sendall(payload.encode('utf-8'))
        	print(f"Message sent to {RECEIVER_IP}:{RECEIVER_PORT}")
	except Exception as e:
    	print(f"Error sending message over network: {e}")

# Main loop
if __name__ == "__main__":
	print("Waiting for transmission...")
	try:
    	while True:
        	message = read_message()
        	if message:
            	print("Received message:", message)
        	time.sleep(0.0005)
	except KeyboardInterrupt:
    	spi.close()
    	GPIO.cleanup()
